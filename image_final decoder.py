# -*- coding: utf-8 -*-
"""Image_final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11S8o6Gqvrg42LOf8YAqIx7x0OmUpY0Sq
"""

import torch
import torch.nn as nn

class LightResBlock(nn.Module):
    def __init__(self, channels, kernel_size=3):
        super().__init__()
        self.conv1 = nn.Conv2d(channels, channels, kernel_size, 1, kernel_size//2)
        self.bn1 = nn.BatchNorm2d(channels)
        self.relu = nn.LeakyReLU(0.2, inplace=True)
        self.conv2 = nn.Conv2d(channels, channels, kernel_size, 1, kernel_size//2)
        self.bn2 = nn.BatchNorm2d(channels)
    def forward(self, x):
        residual = x
        out = self.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += residual
        out = self.relu(out)
        return out

class MemoryEfficientDecoder(nn.Module):
    def __init__(self, latent_dim=512, out_channels=1):
        super().__init__()
        self.fc = nn.Sequential(
            nn.Linear(latent_dim, 512*4*16),
            nn.BatchNorm1d(512*4*16),
            nn.ReLU(True)
        )
        self.deconv_layers = nn.Sequential(
            nn.ConvTranspose2d(512, 256, 4, 2, 1),
            nn.BatchNorm2d(256),
            nn.ReLU(True),
            LightResBlock(256),
            nn.ConvTranspose2d(256, 128, 4, 2, 1),
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            LightResBlock(128),
            nn.ConvTranspose2d(128, 64, 4, 2, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            LightResBlock(64),
            nn.ConvTranspose2d(64, 32, 4, 2, 1),
            nn.BatchNorm2d(32),
            nn.ReLU(True),
            nn.ConvTranspose2d(32, 16, 4, 2, 1),
            nn.BatchNorm2d(16),
            nn.ReLU(True),
            nn.Conv2d(16, out_channels, 3, 1, 1),
            nn.Tanh()
        )
        self.refine = nn.Sequential(
            nn.Conv2d(out_channels, 8, 3, 1, 1),
            nn.LeakyReLU(0.2, True),
            nn.Conv2d(8, out_channels, 3, 1, 1),
            nn.Tanh()
        )

    def forward(self, z):
        h = self.fc(z).view(z.size(0), 512, 4, 16)
        x = self.deconv_layers(h)
        return torch.tanh(x + self.refine(x))